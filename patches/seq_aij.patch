--- aij.c	2017-04-24 09:46:27.000000000 -0400
+++ aij_new.c	2017-07-27 23:10:28.621594000 -0400
@@ -972,66 +972,6 @@
 }
 
 #undef __FUNCT__
-#define __FUNCT__ "MatAssemblyEnd_SeqAIJ"
-PetscErrorCode MatAssemblyEnd_SeqAIJ(Mat A,MatAssemblyType mode)
-{
-  Mat_SeqAIJ     *a = (Mat_SeqAIJ*)A->data;
-  PetscErrorCode ierr;
-  PetscInt       fshift = 0,i,j,*ai = a->i,*aj = a->j,*imax = a->imax;
-  PetscInt       m      = A->rmap->n,*ip,N,*ailen = a->ilen,rmax = 0;
-  MatScalar      *aa    = a->a,*ap;
-  PetscReal      ratio  = 0.6;
-
-  PetscFunctionBegin;
-  if (mode == MAT_FLUSH_ASSEMBLY) PetscFunctionReturn(0);
-
-  if (m) rmax = ailen[0]; /* determine row with most nonzeros */
-  for (i=1; i<m; i++) {
-    /* move each row back by the amount of empty slots (fshift) before it*/
-    fshift += imax[i-1] - ailen[i-1];
-    rmax    = PetscMax(rmax,ailen[i]);
-    if (fshift) {
-      ip = aj + ai[i];
-      ap = aa + ai[i];
-      N  = ailen[i];
-      for (j=0; j<N; j++) {
-        ip[j-fshift] = ip[j];
-        ap[j-fshift] = ap[j];
-      }
-    }
-    ai[i] = ai[i-1] + ailen[i-1];
-  }
-  if (m) {
-    fshift += imax[m-1] - ailen[m-1];
-    ai[m]   = ai[m-1] + ailen[m-1];
-  }
-
-  /* reset ilen and imax for each row */
-  a->nonzerorowcnt = 0;
-  for (i=0; i<m; i++) {
-    ailen[i] = imax[i] = ai[i+1] - ai[i];
-    a->nonzerorowcnt += ((ai[i+1] - ai[i]) > 0);
-  }
-  a->nz = ai[m];
-  if (fshift && a->nounused == -1) SETERRQ3(PETSC_COMM_SELF,PETSC_ERR_PLIB, "Unused space detected in matrix: %D X %D, %D unneeded", m, A->cmap->n, fshift);
-
-  ierr = MatMarkDiagonal_SeqAIJ(A);CHKERRQ(ierr);
-  ierr = PetscInfo4(A,"Matrix size: %D X %D; storage space: %D unneeded,%D used\n",m,A->cmap->n,fshift,a->nz);CHKERRQ(ierr);
-  ierr = PetscInfo1(A,"Number of mallocs during MatSetValues() is %D\n",a->reallocs);CHKERRQ(ierr);
-  ierr = PetscInfo1(A,"Maximum nonzeros in any row is %D\n",rmax);CHKERRQ(ierr);
-
-  A->info.mallocs    += a->reallocs;
-  a->reallocs         = 0;
-  A->info.nz_unneeded = (PetscReal)fshift;
-  a->rmax             = rmax;
-
-  ierr = MatCheckCompressedRow(A,a->nonzerorowcnt,&a->compressedrow,a->i,m,ratio);CHKERRQ(ierr);
-  ierr = MatAssemblyEnd_SeqAIJ_Inode(A,mode);CHKERRQ(ierr);
-  ierr = MatSeqAIJInvalidateDiagonal(A);CHKERRQ(ierr);
-  PetscFunctionReturn(0);
-}
-
-#undef __FUNCT__
 #define __FUNCT__ "MatRealPart_SeqAIJ"
 PetscErrorCode MatRealPart_SeqAIJ(Mat A)
 {
@@ -1075,52 +1015,6 @@
 }
 
 #undef __FUNCT__
-#define __FUNCT__ "MatDestroy_SeqAIJ"
-PetscErrorCode MatDestroy_SeqAIJ(Mat A)
-{
-  Mat_SeqAIJ     *a = (Mat_SeqAIJ*)A->data;
-  PetscErrorCode ierr;
-
-  PetscFunctionBegin;
-#if defined(PETSC_USE_LOG)
-  PetscLogObjectState((PetscObject)A,"Rows=%D, Cols=%D, NZ=%D",A->rmap->n,A->cmap->n,a->nz);
-#endif
-  ierr = MatSeqXAIJFreeAIJ(A,&a->a,&a->j,&a->i);CHKERRQ(ierr);
-  ierr = ISDestroy(&a->row);CHKERRQ(ierr);
-  ierr = ISDestroy(&a->col);CHKERRQ(ierr);
-  ierr = PetscFree(a->diag);CHKERRQ(ierr);
-  ierr = PetscFree(a->ibdiag);CHKERRQ(ierr);
-  ierr = PetscFree2(a->imax,a->ilen);CHKERRQ(ierr);
-  ierr = PetscFree3(a->idiag,a->mdiag,a->ssor_work);CHKERRQ(ierr);
-  ierr = PetscFree(a->solve_work);CHKERRQ(ierr);
-  ierr = ISDestroy(&a->icol);CHKERRQ(ierr);
-  ierr = PetscFree(a->saved_values);CHKERRQ(ierr);
-  ierr = ISColoringDestroy(&a->coloring);CHKERRQ(ierr);
-  ierr = PetscFree2(a->compressedrow.i,a->compressedrow.rindex);CHKERRQ(ierr);
-  ierr = PetscFree(a->matmult_abdense);CHKERRQ(ierr);
-
-  ierr = MatDestroy_SeqAIJ_Inode(A);CHKERRQ(ierr);
-  ierr = PetscFree(A->data);CHKERRQ(ierr);
-
-  ierr = PetscObjectChangeTypeName((PetscObject)A,0);CHKERRQ(ierr);
-  ierr = PetscObjectComposeFunction((PetscObject)A,"MatSeqAIJSetColumnIndices_C",NULL);CHKERRQ(ierr);
-  ierr = PetscObjectComposeFunction((PetscObject)A,"MatStoreValues_C",NULL);CHKERRQ(ierr);
-  ierr = PetscObjectComposeFunction((PetscObject)A,"MatRetrieveValues_C",NULL);CHKERRQ(ierr);
-  ierr = PetscObjectComposeFunction((PetscObject)A,"MatConvert_seqaij_seqsbaij_C",NULL);CHKERRQ(ierr);
-  ierr = PetscObjectComposeFunction((PetscObject)A,"MatConvert_seqaij_seqbaij_C",NULL);CHKERRQ(ierr);
-  ierr = PetscObjectComposeFunction((PetscObject)A,"MatConvert_seqaij_seqaijperm_C",NULL);CHKERRQ(ierr);
-#if defined(PETSC_HAVE_ELEMENTAL)
-  ierr = PetscObjectComposeFunction((PetscObject)A,"MatConvert_seqaij_elemental_C",NULL);CHKERRQ(ierr);
-#endif
-  ierr = PetscObjectComposeFunction((PetscObject)A,"MatConvert_seqaij_seqdense_C",NULL);CHKERRQ(ierr);
-  ierr = PetscObjectComposeFunction((PetscObject)A,"MatIsTranspose_C",NULL);CHKERRQ(ierr);
-  ierr = PetscObjectComposeFunction((PetscObject)A,"MatSeqAIJSetPreallocation_C",NULL);CHKERRQ(ierr);
-  ierr = PetscObjectComposeFunction((PetscObject)A,"MatSeqAIJSetPreallocationCSR_C",NULL);CHKERRQ(ierr);
-  ierr = PetscObjectComposeFunction((PetscObject)A,"MatReorderForNonzeroDiagonal_C",NULL);CHKERRQ(ierr);
-  PetscFunctionReturn(0);
-}
-
-#undef __FUNCT__
 #define __FUNCT__ "MatSetOption_SeqAIJ"
 PetscErrorCode MatSetOption_SeqAIJ(Mat A,MatOption op,PetscBool flg)
 {
@@ -1276,65 +1170,6 @@
 #include <../src/mat/impls/aij/seq/ftn-kernels/fmult.h>
 
 #undef __FUNCT__
-#define __FUNCT__ "MatMult_SeqAIJ"
-PetscErrorCode MatMult_SeqAIJ(Mat A,Vec xx,Vec yy)
-{
-  Mat_SeqAIJ        *a = (Mat_SeqAIJ*)A->data;
-  PetscScalar       *y;
-  const PetscScalar *x;
-  const MatScalar   *aa;
-  PetscErrorCode    ierr;
-  PetscInt          m=A->rmap->n;
-  const PetscInt    *aj,*ii,*ridx=NULL;
-  PetscInt          n,i;
-  PetscScalar       sum;
-  PetscBool         usecprow=a->compressedrow.use;
-
-#if defined(PETSC_HAVE_PRAGMA_DISJOINT)
-#pragma disjoint(*x,*y,*aa)
-#endif
-
-  PetscFunctionBegin;
-  ierr = VecGetArrayRead(xx,&x);CHKERRQ(ierr);
-  ierr = VecGetArray(yy,&y);CHKERRQ(ierr);
-  ii   = a->i;
-  if (usecprow) { /* use compressed row format */
-    ierr = PetscMemzero(y,m*sizeof(PetscScalar));CHKERRQ(ierr);
-    m    = a->compressedrow.nrows;
-    ii   = a->compressedrow.i;
-    ridx = a->compressedrow.rindex;
-    for (i=0; i<m; i++) {
-      n           = ii[i+1] - ii[i];
-      aj          = a->j + ii[i];
-      aa          = a->a + ii[i];
-      sum         = 0.0;
-      PetscSparseDensePlusDot(sum,x,aa,aj,n);
-      /* for (j=0; j<n; j++) sum += (*aa++)*x[*aj++]; */
-      y[*ridx++] = sum;
-    }
-  } else { /* do not use compressed row format */
-#if defined(PETSC_USE_FORTRAN_KERNEL_MULTAIJ)
-    aj   = a->j;
-    aa   = a->a;
-    fortranmultaij_(&m,x,ii,aj,aa,y);
-#else
-    for (i=0; i<m; i++) {
-      n           = ii[i+1] - ii[i];
-      aj          = a->j + ii[i];
-      aa          = a->a + ii[i];
-      sum         = 0.0;
-      PetscSparseDensePlusDot(sum,x,aa,aj,n);
-      y[i] = sum;
-    }
-#endif
-  }
-  ierr = PetscLogFlops(2.0*a->nz - a->nonzerorowcnt);CHKERRQ(ierr);
-  ierr = VecRestoreArrayRead(xx,&x);CHKERRQ(ierr);
-  ierr = VecRestoreArray(yy,&y);CHKERRQ(ierr);
-  PetscFunctionReturn(0);
-}
-
-#undef __FUNCT__
 #define __FUNCT__ "MatMultMax_SeqAIJ"
 PetscErrorCode MatMultMax_SeqAIJ(Mat A,Vec xx,Vec yy)
 {
